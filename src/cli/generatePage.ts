import fs from 'fs-extra';
import path from 'path';
import { LoggerService } from '../logger/LoggerService';

interface PageOptions {
  type?: string;
  path?: string;
}

export async function generatePage(name: string, options: PageOptions = {}): Promise<void> {
  const logger = new LoggerService({ module: 'PageGenerator' });
  const pageType = options.type || 'ssr';
  const pagePath = options.path || 'src/pages';
  
  const pageDir = path.join(process.cwd(), pagePath, name);
  const pageFile = path.join(pageDir, 'index.tsx');
  const styleFile = path.join(pageDir, 'index.css');
  const indexFile = path.join(pageDir, 'index.ts');
  
  try {
    // Create page directory
    await fs.ensureDir(pageDir);
    
    // Generate page file
    const pageContent = generatePageContent(name, pageType);
    await fs.writeFile(pageFile, pageContent);
    
    // Generate style file
    const styleContent = generatePageStyleContent(name);
    await fs.writeFile(styleFile, styleContent);
    
    // Generate index file
    const indexContent = generatePageIndexContent(name);
    await fs.writeFile(indexFile, indexContent);
    
    logger.info(`Page files created in ${pageDir}`);
  } catch (error: any) {
    logger.error(`Failed to generate page files`, { error: error.message });
    throw error;
  }
}

function generatePageContent(name: string, type: string): string {
  const className = `${name.toLowerCase()}-page`;
  
  let getServerSideProps = '';
  let getStaticProps = '';
  let getStaticPaths = '';
  
  switch (type) {
    case 'ssr':
      getServerSideProps = `
export async function getServerSideProps() {
  // Add your server-side data fetching logic here
  return {
    props: {
      // Add your props here
    },
  };
}`;
      break;
    case 'ssg':
      getStaticProps = `
export async function getStaticProps() {
  // Add your static generation logic here
  return {
    props: {
      // Add your props here
    },
    revalidate: 60, // Revalidate every 60 seconds
  };
}`;
      break;
    case 'csr':
      // No server-side functions for client-side rendering
      break;
  }
  
  return `import React from 'react';
import Head from 'next/head';
import './index.css';

interface ${name}PageProps {
  // Add your props here
}

const ${name}Page: React.FC<${name}PageProps> = (props) => {
  return (
    <>
      <Head>
        <title>${name} - RocketCode App</title>
        <meta name="description" content="${name} page description" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      <main className="${className}">
        <div className="container">
          <h1>${name} Page</h1>
          <p>This is a ${type.toUpperCase()} page generated by RocketCode Framework.</p>
          
          {/* Add your page content here */}
          <div className="content">
            <p>Welcome to the ${name} page!</p>
          </div>
        </div>
      </main>
    </>
  );
};

export default ${name}Page;
${getServerSideProps}${getStaticProps}${getStaticPaths}`;
}

function generatePageStyleContent(name: string): string {
  const className = `${name.toLowerCase()}-page`;
  
  return `.${className} {
  min-height: 100vh;
  padding: 2rem;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
}

.${className} .container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  backdrop-filter: blur(10px);
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
}

.${className} h1 {
  font-size: 3rem;
  font-weight: bold;
  margin-bottom: 1rem;
  text-align: center;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
}

.${className} p {
  font-size: 1.2rem;
  line-height: 1.6;
  margin-bottom: 1rem;
  text-align: center;
}

.${className} .content {
  margin-top: 2rem;
  padding: 2rem;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 8px;
  border: 1px solid rgba(255, 255, 255, 0.1);
}

@media (max-width: 768px) {
  .${className} {
    padding: 1rem;
  }
  
  .${className} .container {
    padding: 1rem;
  }
  
  .${className} h1 {
    font-size: 2rem;
  }
  
  .${className} p {
    font-size: 1rem;
  }
}`;
}

function generatePageIndexContent(name: string): string {
  return `export { default } from './index';
`;
} 